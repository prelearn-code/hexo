<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ssl-操作</title>
    <link href="/2024/07/22/ssl-%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/07/22/ssl-%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装操作"><a href="#一、安装操作" class="headerlink" title="一、安装操作"></a>一、安装操作</h1><h2 id="1-OpenSSH-Client（openssh-client）：这个客户端工具允许用户通过SSH协议连接到远程主机。常用的命令包括："><a href="#1-OpenSSH-Client（openssh-client）：这个客户端工具允许用户通过SSH协议连接到远程主机。常用的命令包括：" class="headerlink" title="1. OpenSSH Client（openssh-client）：这个客户端工具允许用户通过SSH协议连接到远程主机。常用的命令包括："></a>1. <strong>OpenSSH Client（openssh-client）</strong>：这个客户端工具允许用户通过SSH协议连接到远程主机。常用的命令包括：</h2><ul><li><code>ssh</code>：用于安全远程登录。</li><li><code>scp</code>：用于安全复制文件。</li><li><code>sftp</code>：用于安全文件传输。</li><li><code>ssh-keygen</code>：用于生成和管理SSH密钥。</li><li><code>ssh-copy-id</code>：用于将本地生成的SSH公钥复制到远程主机的授权密钥文件中，以便实现无密码登录。</li></ul><ol start="2"><li><strong>OpenSSH Server（openssh-server）</strong>：这个服务器端工具允许远程用户通过SSH协议连接到这台机器。主要组件包括：<ul><li><code>sshd</code>：SSH守护进程，处理和管理SSH连接。</li><li>配置文件通常位于<code>/etc/ssh/sshd_config</code>，可以在这里进行各种设置，如端口、认证方式、允许或禁止的用户等。</li></ul></li></ol><p>要检查Ubuntu 24.04是否已安装OpenSSH工具包，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -l | grep openssh<br><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install openssh-client openssh-server<br></code></pre></td></tr></table></figure><h1 id="二、查看SSH服务的版本"><a href="#二、查看SSH服务的版本" class="headerlink" title="二、查看SSH服务的版本"></a>二、查看SSH服务的版本</h1><h2 id="1-查看OpenSSH客户端版本："><a href="#1-查看OpenSSH客户端版本：" class="headerlink" title="1. 查看OpenSSH客户端版本："></a>1. <strong>查看OpenSSH客户端版本</strong>：</h2>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -V<br></code></pre></td></tr></table></figure><p>   这将输出类似于以下的信息：<br>   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">OpenSSH_8</span>.<span class="hljs-number">9</span>p1, OpenSSL <span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>n  <span class="hljs-number">15</span> Mar <span class="hljs-number">2022</span><br></code></pre></td></tr></table></figure></p><h2 id="2-查看OpenSSH服务器版本："><a href="#2-查看OpenSSH服务器版本：" class="headerlink" title="2. 查看OpenSSH服务器版本："></a>2. <strong>查看OpenSSH服务器版本</strong>：</h2><p>   首先确保SSH服务器正在运行，然后使用以下命令连接到本地SSH服务器并查看其版本信息：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -V localhost<br></code></pre></td></tr></table></figure><br>   这将返回客户端和服务器的版本信息。如果只需要查看服务器版本信息，可以查找<code>sshd</code>守护进程的版本：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> sshd -T | grep version<br></code></pre></td></tr></table></figure><br>   这将输出类似于以下的信息：<br>   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sshd</span> version OpenSSH_8.<span class="hljs-number">9</span>p1, OpenSSL <span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>n  <span class="hljs-number">15</span> Mar <span class="hljs-number">2022</span><br></code></pre></td></tr></table></figure></p><h1 id="三、启动操作"><a href="#三、启动操作" class="headerlink" title="三、启动操作"></a>三、启动操作</h1><h2 id="1-开启端口防火墙策略"><a href="#1-开启端口防火墙策略" class="headerlink" title="1.开启端口防火墙策略"></a>1.开启端口防火墙策略</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install ufw<br>sudo ufw enable<br>sudo ufw allow 22<br>sudo ufw status<br></code></pre></td></tr></table></figure><h2 id="2-自定义开放端口-可选"><a href="#2-自定义开放端口-可选" class="headerlink" title="2.自定义开放端口(可选)"></a>2.自定义开放端口(可选)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ufw allow 2222<br>sudo ufw status<br></code></pre></td></tr></table></figure><h2 id="3-启动SSH服务"><a href="#3-启动SSH服务" class="headerlink" title="3.启动SSH服务"></a>3.启动SSH服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl start ssh<br>sudo systemctl enable ssh  //自启动命令<br>sudo systemctl status ssh<br><br>/etc/ssh/sshd_config   // 配置文件所在位置<br></code></pre></td></tr></table></figure><h1 id="四、退出操作（exit）"><a href="#四、退出操作（exit）" class="headerlink" title="四、退出操作（exit）"></a>四、退出操作（exit）</h1><h3 id="方法1：使用exit命令"><a href="#方法1：使用exit命令" class="headerlink" title="方法1：使用exit命令"></a>方法1：使用<code>exit</code>命令</h3><p>在SSH会话中，可以使用<code>exit</code>命令退出会话并断开连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>或者按 <code>Ctrl+D</code> 组合键，也可以关闭当前的SSH会话。</p><h3 id="方法2：使用logout命令"><a href="#方法2：使用logout命令" class="headerlink" title="方法2：使用logout命令"></a>方法2：使用<code>logout</code>命令</h3><p>在某些系统上，可以使用<code>logout</code>命令断开SSH连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">logout</span><br></code></pre></td></tr></table></figure><h3 id="方法3：关闭终端"><a href="#方法3：关闭终端" class="headerlink" title="方法3：关闭终端"></a>方法3：关闭终端</h3><p>如果你是在终端（如gnome-terminal、xterm、tmux等）中运行的SSH连接，直接关闭终端窗口也会断开SSH连接。</p><h3 id="方法4：使用kill命令（强制断开）"><a href="#方法4：使用kill命令（强制断开）" class="headerlink" title="方法4：使用kill命令（强制断开）"></a>方法4：使用<code>kill</code>命令（强制断开）</h3><p>如果需要强制断开SSH连接，可以在本地终端上找到SSH进程并杀掉它：</p><ol><li><p>找到SSH进程的PID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux | grep ssh<br></code></pre></td></tr></table></figure></li><li><p>使用<code>kill</code>命令终止进程（替换<code>&lt;PID&gt;</code>为实际的进程ID）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> &lt;PID&gt;<br></code></pre></td></tr></table></figure></li><li><p>如果<code>kill</code>命令无法终止进程，可以使用<code>kill -9</code>强制终止：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 &lt;PID&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="方法5：使用tmux或screen分离会话（可选）"><a href="#方法5：使用tmux或screen分离会话（可选）" class="headerlink" title="方法5：使用tmux或screen分离会话（可选）"></a>方法5：使用<code>tmux</code>或<code>screen</code>分离会话（可选）</h3><p>如果你在SSH会话中使用了<code>tmux</code>或<code>screen</code>，可以分离（detach）会话，而不会真正断开连接：</p><ul><li>在<code>tmux</code>中，按下 <code>Ctrl+B</code> 然后按 <code>D</code> 键。</li><li>在<code>screen</code>中，按下 <code>Ctrl+A</code> 然后按 <code>D</code> 键。</li></ul><p>这将分离会话，但会话仍在远程主机上运行，你可以稍后重新连接。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>假设你当前在SSH会话中，只需键入<code>exit</code>并按回车即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h1 id="五、认证操作"><a href="#五、认证操作" class="headerlink" title="五、认证操作"></a>五、认证操作</h1><h2 id="（1）账号密码连接"><a href="#（1）账号密码连接" class="headerlink" title="（1）账号密码连接"></a>（1）账号密码连接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh ubuntu@192.168.179.141<br></code></pre></td></tr></table></figure><h2 id="（2）公私钥认证连接"><a href="#（2）公私钥认证连接" class="headerlink" title="（2）公私钥认证连接"></a>（2）公私钥认证连接</h2>]]></content>
    
    
    <categories>
      
      <category>网络协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssl</tag>
      
      <tag>operate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssl-理论</title>
    <link href="/2024/07/22/ssl-%E7%90%86%E8%AE%BA/"/>
    <url>/2024/07/22/ssl-%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="1-SSH理论概述"><a href="#1-SSH理论概述" class="headerlink" title="1.SSH理论概述"></a>1.SSH理论概述</h1><h2 id="（1）SSH工作的特点"><a href="#（1）SSH工作的特点" class="headerlink" title="（1）SSH工作的特点"></a>（1）SSH工作的特点</h2><ul><li>工作在应用层。</li><li>使用TCP传输协议。</li><li>密文传输命令，比telent明文传输命令更加安全。</li><li>只能对与一个应用进行加密。</li><li>需要双方都有公私钥对。</li><li>端口22。</li></ul><h2 id="（2）SSH工作的基本框架"><a href="#（2）SSH工作的基本框架" class="headerlink" title="（2）SSH工作的基本框架"></a>（2）SSH工作的基本框架</h2><h3 id="a-传输层协议"><a href="#a-传输层协议" class="headerlink" title="a. 传输层协议"></a>a. 传输层协议</h3><p>提供服务器认证，数据机密性，信息完整性 等的支持。</p><h3 id="b-用户认证协议"><a href="#b-用户认证协议" class="headerlink" title="b. 用户认证协议"></a>b. 用户认证协议</h3><p>为服务器提供客户端的身份鉴别。</p><h3 id="c-连接协议"><a href="#c-连接协议" class="headerlink" title="c. 连接协议"></a>c. 连接协议</h3><p>将加密的信息隧道复用成若干个逻辑通道，提供给更高层的应用协议使用； 各种高层应用协议可以相对地独立于SSH基本体系之外，并依靠这个基本框架，通过连接协议使用SSH的安全机制。</p><h2 id="（3）SSH建立与通信的简单流程"><a href="#（3）SSH建立与通信的简单流程" class="headerlink" title="（3）SSH建立与通信的简单流程"></a>（3）SSH建立与通信的简单流程</h2><h3 id="a-版本号协商阶段"><a href="#a-版本号协商阶段" class="headerlink" title="a. 版本号协商阶段"></a>a. 版本号协商阶段</h3><ul><li>服务器打开端口 22，等待客户端连接。</li><li>客户端向服务器端发起 TCP初始连接请求，TCP连接建立后，服务器向客户端发送第一个报文，包括版本标志字符串，格式为“SSH－&lt;主协议版本号&gt;.&lt;次协议版本号&gt;－&lt;软件版本号&gt;”，协议版本号由主版本号和次版本号组成，软件版本号主要是为调试使用。</li><li>客户端收到报文后，解析该数据包，如果服务器端的协议版本号比自己的低，且客户端能支持服务器端的低版本，就使用服务器端的低版本协议号，否则使用自己的协议版本号。</li><li>客户端回应服务器一个报文，包含了客户端决定使用的协议版本号。服务器比较客户端发来的版本号，决定是否能同客户端一起工作。</li><li>如果协商成功，则进入密钥和算法协商阶段，否则服务器端断开 TCP连接。</li><li>版本号协商阶段报文都是采用明文方式传输的。</li></ul><h3 id="b-密钥和算法协商阶段"><a href="#b-密钥和算法协商阶段" class="headerlink" title="b.密钥和算法协商阶段"></a>b.密钥和算法协商阶段</h3><ul><li>服务器端和客户端分别发送算法协商报文给对端，报文中包含自己支持的公钥算法列表、加密算法列表、MAC（Message Authentication Code，消息验证码）算法列表、压缩算法列表等;</li><li>服务器端和客户端根据对端和本端支持的算法列表得出最终使用的算法。</li><li>服务器端和客户端利用 DH交换（Diffie-Hellman Exchange）算法、主机密钥对等参数，生成会话密钥和会话 ID。</li><li>对于后续传输的数据，两端都会使用会话密钥进行加密和解密，保证了数据传送的安全</li><li>在认证阶段，两端会使用会话 ID用于认证过程。</li><li> 在协商阶段之前，服务器端已经生成 RSA或 DSA密钥对，他们主要用于参与会话密钥的生成。</li></ul><h3 id="c-认证阶段"><a href="#c-认证阶段" class="headerlink" title="c.认证阶段"></a>c.认证阶段</h3><ul><li>客户端向服务器端发送认证请求，认证请求中包含用户名、认证方法、与该认证方法相关的内容（如：password认证时，内容为密码）。</li><li>服务器端对客户端进行认证，如果认证失败，则向客户端发送认证失败消息，其中包含可以再次认证的方法列表。</li><li>客户端从认证方法列表中选取一种认证方法再次进行认证。</li><li>该过程反复进行， 直到认证成功或者认证次数达到上限， 服务器关闭连接为止。</li></ul><h4 id="SSH1认证的方式"><a href="#SSH1认证的方式" class="headerlink" title="SSH1认证的方式"></a>SSH1认证的方式</h4><ul><li> password认证：客户端向服务器发出 password认证请求，将用户名和密码加密后发送给服务器；服务器将该信息解密后得到用户名和密码的明文，与设备上保存的用户名和密码进行比较，并返回认证成功或失败的消息。</li><li>publickey 认证：采用数字签名的方法来认证客户端。目前，设备上可以利用RSA和 DSA两种公共密钥算法实现数字签名。客户端发送包含用户名、公共密钥和公共密钥算法的 publickey 认证请求给服务器端。服务器对公钥进行合法性检查，如果不合法，则直接发送失败消息；否则，服务器利用数字签名对客户端进行认证，并返回认证成功或失败的消息。</li></ul><h4 id="SSH2额外的认证方式"><a href="#SSH2额外的认证方式" class="headerlink" title="SSH2额外的认证方式"></a>SSH2额外的认证方式</h4><ul><li>password-publickey 认证：指定该用户的认证方式为 password 和 publickey认证同时满足。客户端版本为 SSH1的用户只要通过其中一种认证即可登录；客户端版本为 SSH2的用户必须两种认证都通过才能登录。</li><li>any认证：指定该用户的认证方式可以是 password，也可以是 publickey。</li></ul><h3 id="d-会话请求阶段"><a href="#d-会话请求阶段" class="headerlink" title="d.会话请求阶段"></a>d.会话请求阶段</h3><ul><li>服务器等待客户端的请求；</li><li>认证通过后，客户端向服务器发送会话请求；</li><li>服务器处理客户端的请求。请求被成功处理后， 服务器会向客户端回应 SSH_SMSG_SUCCESS包，SSH进入交互会话阶段；否则回应 SSH_SMSG_FAILURE包，表示服务器处理请求失败或者不能识别请求。</li></ul><h3 id="e-交互会话阶段"><a href="#e-交互会话阶段" class="headerlink" title="e.交互会话阶段"></a>e.交互会话阶段</h3><ul><li>在这个模式下，数据被双向传送。</li><li>客户端将要执行的命令加密后传给服务器;</li><li>服务器接收到报文，解密后执行该命令,将执行的结果加密发还给客户端;</li><li>客户端将接收到的结果解密后显示到终端上。</li></ul><h1 id="2-SSH实际流程数据包分析"><a href="#2-SSH实际流程数据包分析" class="headerlink" title="2. SSH实际流程数据包分析"></a>2. <a href="https://blog.csdn.net/m0_49864110/article/details/128500490">SSH实际流程数据包分析</a></h1><h2 id="（1）版本协商"><a href="#（1）版本协商" class="headerlink" title="（1）版本协商"></a>（1）版本协商</h2><h3 id="客户端发送到服务端的协商"><a href="#客户端发送到服务端的协商" class="headerlink" title="客户端发送到服务端的协商"></a>客户端发送到服务端的协商</h3><p>![](..&#x2F;pic&#x2F;Pasted image 20240722150717.png)</p><h3 id="服务端返回给客户端的协商"><a href="#服务端返回给客户端的协商" class="headerlink" title="服务端返回给客户端的协商"></a>服务端返回给客户端的协商</h3><p>![](..&#x2F;pic&#x2F;Pasted image 20240722150736.png)</p><h2 id="（2）算法协商"><a href="#（2）算法协商" class="headerlink" title="（2）算法协商"></a>（2）算法协商</h2><h3 id="客户端到服务端的算法协商"><a href="#客户端到服务端的算法协商" class="headerlink" title="客户端到服务端的算法协商"></a>客户端到服务端的算法协商</h3><p>![](..&#x2F;pic&#x2F;Pasted image 20240722151051.png)</p><h3 id="服务端到客户端的算法协商"><a href="#服务端到客户端的算法协商" class="headerlink" title="服务端到客户端的算法协商"></a>服务端到客户端的算法协商</h3><p>![](..&#x2F;pic&#x2F;Pasted image 20240722151212.png)</p><h2 id="（3）密钥交换"><a href="#（3）密钥交换" class="headerlink" title="（3）密钥交换"></a>（3）密钥交换</h2><h3 id="客户端到服务端密钥交换"><a href="#客户端到服务端密钥交换" class="headerlink" title="客户端到服务端密钥交换"></a>客户端到服务端密钥交换</h3><p>![](..&#x2F;pic&#x2F;Pasted image 20240722151314.png)</p><h3 id="服务端到客户端密钥交换-newkeys"><a href="#服务端到客户端密钥交换-newkeys" class="headerlink" title="服务端到客户端密钥交换+newkeys"></a>服务端到客户端密钥交换+newkeys</h3><p>![](..&#x2F;pic&#x2F;Pasted image 20240722151617.png)</p><h3 id="客户端到服务端的newkeys"><a href="#客户端到服务端的newkeys" class="headerlink" title="客户端到服务端的newkeys"></a>客户端到服务端的newkeys</h3><p>![](..&#x2F;pic&#x2F;Pasted image 20240722151748.png)</p>]]></content>
    
    
    <categories>
      
      <category>网络协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
